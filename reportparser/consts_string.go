// Code generated by "stringer -type=ItemSize,ItemType,ItemTag,CollectionItemType,InputFlags,OutputFlags,FeatureFlags -output=consts_string.go"; DO NOT EDIT.

package reportparser

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ItemSize0-0]
	_ = x[ItemSize8-1]
	_ = x[ItemSize16-2]
	_ = x[ItemSize32-3]
}

const _ItemSize_name = "ItemSize0ItemSize8ItemSize16ItemSize32"

var _ItemSize_index = [...]uint8{0, 9, 18, 28, 38}

func (i ItemSize) String() string {
	if i >= ItemSize(len(_ItemSize_index)-1) {
		return "ItemSize(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _ItemSize_name[_ItemSize_index[i]:_ItemSize_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ItemTypeMain-0]
	_ = x[ItemTypeGlobal-1]
	_ = x[ItemTypeLocal-2]
	_ = x[ItemTypeReserved-3]
}

const _ItemType_name = "ItemTypeMainItemTypeGlobalItemTypeLocalItemTypeReserved"

var _ItemType_index = [...]uint8{0, 12, 26, 39, 55}

func (i ItemType) String() string {
	if i >= ItemType(len(_ItemType_index)-1) {
		return "ItemType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _ItemType_name[_ItemType_index[i]:_ItemType_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ItemTagMainInput-32]
	_ = x[ItemTagMainOutput-36]
	_ = x[ItemTagMainFeature-44]
	_ = x[ItemTagMainCollection-40]
	_ = x[ItemTagMainEndCollection-48]
	_ = x[ItemTagGlobalUsagePage-1]
	_ = x[ItemTagGlobalLogicalMinimum-5]
	_ = x[ItemTagGlobalLogicalMaximum-9]
	_ = x[ItemTagGlobalPhysicalMinimum-13]
	_ = x[ItemTagGlobalPhysicalMaximum-17]
	_ = x[ItemTagGlobalUnitExponent-21]
	_ = x[ItemTagGlobalUnit-25]
	_ = x[ItemTagGlobalReportSize-29]
	_ = x[ItemTagGlobalReportID-33]
	_ = x[ItemTagGlobalReportCount-37]
	_ = x[ItemTagGlobalPush-41]
	_ = x[ItemTagGlobalPop-45]
	_ = x[ItemTagLocalUsage-2]
	_ = x[ItemTagLocalUsageMinimum-6]
	_ = x[ItemTagLocalUsageMaximum-10]
	_ = x[ItemTagLocalDesignatorIndex-14]
	_ = x[ItemTagLocalDesignatorMinimum-18]
	_ = x[ItemTagLocalDesignatorMaximum-22]
	_ = x[ItemTagLocalStringIndex-30]
	_ = x[ItemTagLocalStringMinimum-34]
	_ = x[ItemTagLocalStringMaximum-38]
	_ = x[ItemTagLocalDelimiter-42]
}

const _ItemTag_name = "ItemTagGlobalUsagePageItemTagLocalUsageItemTagGlobalLogicalMinimumItemTagLocalUsageMinimumItemTagGlobalLogicalMaximumItemTagLocalUsageMaximumItemTagGlobalPhysicalMinimumItemTagLocalDesignatorIndexItemTagGlobalPhysicalMaximumItemTagLocalDesignatorMinimumItemTagGlobalUnitExponentItemTagLocalDesignatorMaximumItemTagGlobalUnitItemTagGlobalReportSizeItemTagLocalStringIndexItemTagMainInputItemTagGlobalReportIDItemTagLocalStringMinimumItemTagMainOutputItemTagGlobalReportCountItemTagLocalStringMaximumItemTagMainCollectionItemTagGlobalPushItemTagLocalDelimiterItemTagMainFeatureItemTagGlobalPopItemTagMainEndCollection"

var _ItemTag_map = map[ItemTag]string{
	1:  _ItemTag_name[0:22],
	2:  _ItemTag_name[22:39],
	5:  _ItemTag_name[39:66],
	6:  _ItemTag_name[66:90],
	9:  _ItemTag_name[90:117],
	10: _ItemTag_name[117:141],
	13: _ItemTag_name[141:169],
	14: _ItemTag_name[169:196],
	17: _ItemTag_name[196:224],
	18: _ItemTag_name[224:253],
	21: _ItemTag_name[253:278],
	22: _ItemTag_name[278:307],
	25: _ItemTag_name[307:324],
	29: _ItemTag_name[324:347],
	30: _ItemTag_name[347:370],
	32: _ItemTag_name[370:386],
	33: _ItemTag_name[386:407],
	34: _ItemTag_name[407:432],
	36: _ItemTag_name[432:449],
	37: _ItemTag_name[449:473],
	38: _ItemTag_name[473:498],
	40: _ItemTag_name[498:519],
	41: _ItemTag_name[519:536],
	42: _ItemTag_name[536:557],
	44: _ItemTag_name[557:575],
	45: _ItemTag_name[575:591],
	48: _ItemTag_name[591:615],
}

func (i ItemTag) String() string {
	if str, ok := _ItemTag_map[i]; ok {
		return str
	}
	return "ItemTag(" + strconv.FormatInt(int64(i), 10) + ")"
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[CollectionItemTypePhysical-0]
	_ = x[CollectionItemTypeApplication-1]
	_ = x[CollectionItemTypeLogical-2]
	_ = x[CollectionItemTypeReport-3]
	_ = x[CollectionItemTypeNamedArray-4]
	_ = x[CollectionItemTypeUsageSwitch-5]
	_ = x[CollectionItemTypeUsageModifier-6]
}

const _CollectionItemType_name = "CollectionItemTypePhysicalCollectionItemTypeApplicationCollectionItemTypeLogicalCollectionItemTypeReportCollectionItemTypeNamedArrayCollectionItemTypeUsageSwitchCollectionItemTypeUsageModifier"

var _CollectionItemType_index = [...]uint8{0, 26, 55, 80, 104, 132, 161, 192}

func (i CollectionItemType) String() string {
	if i >= CollectionItemType(len(_CollectionItemType_index)-1) {
		return "CollectionItemType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _CollectionItemType_name[_CollectionItemType_index[i]:_CollectionItemType_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[InputFlagConstant-1]
	_ = x[InputFlagVariable-2]
	_ = x[InputFlagRelative-4]
	_ = x[InputFlagWrap-8]
	_ = x[InputFlagNonLinear-16]
	_ = x[InputFlagNoPreferred-32]
	_ = x[InputFlagNullState-64]
	_ = x[InputFlagBufferedBytes-512]
}

const (
	_InputFlags_name_0 = "InputFlagConstantInputFlagVariable"
	_InputFlags_name_1 = "InputFlagRelative"
	_InputFlags_name_2 = "InputFlagWrap"
	_InputFlags_name_3 = "InputFlagNonLinear"
	_InputFlags_name_4 = "InputFlagNoPreferred"
	_InputFlags_name_5 = "InputFlagNullState"
	_InputFlags_name_6 = "InputFlagBufferedBytes"
)

var (
	_InputFlags_index_0 = [...]uint8{0, 17, 34}
)

func (i InputFlags) String() string {
	switch {
	case 1 <= i && i <= 2:
		i -= 1
		return _InputFlags_name_0[_InputFlags_index_0[i]:_InputFlags_index_0[i+1]]
	case i == 4:
		return _InputFlags_name_1
	case i == 8:
		return _InputFlags_name_2
	case i == 16:
		return _InputFlags_name_3
	case i == 32:
		return _InputFlags_name_4
	case i == 64:
		return _InputFlags_name_5
	case i == 512:
		return _InputFlags_name_6
	default:
		return "InputFlags(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[OutputFlagConstant-1]
	_ = x[OutputFlagVariable-2]
	_ = x[OutputFlagRelative-4]
	_ = x[OutputFlagWrap-8]
	_ = x[OutputFlagNonLinear-16]
	_ = x[OutputFlagNoPreferred-32]
	_ = x[OutputFlagNullState-64]
	_ = x[OutputFlagVolatile-128]
	_ = x[OutputFlagBufferedBytes-512]
}

const (
	_OutputFlags_name_0 = "OutputFlagConstantOutputFlagVariable"
	_OutputFlags_name_1 = "OutputFlagRelative"
	_OutputFlags_name_2 = "OutputFlagWrap"
	_OutputFlags_name_3 = "OutputFlagNonLinear"
	_OutputFlags_name_4 = "OutputFlagNoPreferred"
	_OutputFlags_name_5 = "OutputFlagNullState"
	_OutputFlags_name_6 = "OutputFlagVolatile"
	_OutputFlags_name_7 = "OutputFlagBufferedBytes"
)

var (
	_OutputFlags_index_0 = [...]uint8{0, 18, 36}
)

func (i OutputFlags) String() string {
	switch {
	case 1 <= i && i <= 2:
		i -= 1
		return _OutputFlags_name_0[_OutputFlags_index_0[i]:_OutputFlags_index_0[i+1]]
	case i == 4:
		return _OutputFlags_name_1
	case i == 8:
		return _OutputFlags_name_2
	case i == 16:
		return _OutputFlags_name_3
	case i == 32:
		return _OutputFlags_name_4
	case i == 64:
		return _OutputFlags_name_5
	case i == 128:
		return _OutputFlags_name_6
	case i == 512:
		return _OutputFlags_name_7
	default:
		return "OutputFlags(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[FeatureFlagConstant-1]
	_ = x[FeatureFlagVariable-2]
	_ = x[FeatureFlagRelative-4]
	_ = x[FeatureFlagWrap-8]
	_ = x[FeatureFlagNonLinear-16]
	_ = x[FeatureFlagNoPreferred-32]
	_ = x[FeatureFlagNullState-64]
	_ = x[FeatureFlagVolatile-128]
	_ = x[FeatureFlagBufferedBytes-512]
}

const (
	_FeatureFlags_name_0 = "FeatureFlagConstantFeatureFlagVariable"
	_FeatureFlags_name_1 = "FeatureFlagRelative"
	_FeatureFlags_name_2 = "FeatureFlagWrap"
	_FeatureFlags_name_3 = "FeatureFlagNonLinear"
	_FeatureFlags_name_4 = "FeatureFlagNoPreferred"
	_FeatureFlags_name_5 = "FeatureFlagNullState"
	_FeatureFlags_name_6 = "FeatureFlagVolatile"
	_FeatureFlags_name_7 = "FeatureFlagBufferedBytes"
)

var (
	_FeatureFlags_index_0 = [...]uint8{0, 19, 38}
)

func (i FeatureFlags) String() string {
	switch {
	case 1 <= i && i <= 2:
		i -= 1
		return _FeatureFlags_name_0[_FeatureFlags_index_0[i]:_FeatureFlags_index_0[i+1]]
	case i == 4:
		return _FeatureFlags_name_1
	case i == 8:
		return _FeatureFlags_name_2
	case i == 16:
		return _FeatureFlags_name_3
	case i == 32:
		return _FeatureFlags_name_4
	case i == 64:
		return _FeatureFlags_name_5
	case i == 128:
		return _FeatureFlags_name_6
	case i == 512:
		return _FeatureFlags_name_7
	default:
		return "FeatureFlags(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
